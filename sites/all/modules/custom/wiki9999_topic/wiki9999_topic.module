<?php
/**
 * @file
 * Code for the Topic feature.
 */

include_once 'wiki9999_topic.features.inc';

/**
 * Implements hook_node_view()
 */
function wiki9999_topic_node_view($node) {
  // Wenn eine Node des Typs "topic" gespeichert wurde...
  if($node->type == 'topic') {
    // Wir speichern uns das Topic in eine Variable. http(s):// loeschen wir.
    $topic = 'wiki9999-' . str_replace(array('https://', 'http://'), array('', ''), $GLOBALS['base_url'] ) . '/node/' . $node->nid . '-' . $node->uid . '-' . $node->created;
    
    // Wir bauen uns einen Term-Array auf
    $term = array(
      // Id des Vokabulars 'topic-id-taxonomy'.
      'vid' => 2,
      'name' => $topic,
    );

    // Wir gucken ob es den Term schon gibt, und speichern uns die Anzahl als Boolean (TRUE oder FALSE).
    $term_exists = db_query('SELECT name FROM {taxonomy_term_data} WHERE name = :topic', array(':topic' => $topic))->rowCount();
    $term_exists = (bool) $term_exists;

    // Falls der Term noch nicht existiert, legen wir ihn an.
    if(!$term_exists) {
      taxonomy_term_save((object) $term);
    }

    // Wir holen uns den ersten Term mit dem Namen $topic.
    $saved_term = taxonomy_get_term_by_name($topic);
    $saved_term = array_shift(array_values($saved_term));

    // Wir setzen eine Variable, in welcher spaeter steht, ob die Node einen Term hat.
    $node_has_topic_term = FALSE;

    if(isset($node->field_topic_id_taxonomy[$node->language])) {
      foreach($node->field_topic_id_taxonomy[$node->language] as $topic_term) {
        // Falls es bereits einen Term mit dem $topic gibt...
        if($topic_term['tid'] == $saved_term->tid) {
          $node_has_topic_term = TRUE;
        }
      }
    }

    // Wenn die Node noch nicht das $topic als Term hat...
    if(!$node_has_topic_term) {
      // ... setzen wir manuell den Term in das Node-Objekt...
      $node->field_topic_id_taxonomy[$node->language][] = array('tid' => $saved_term->tid, 'taxonomy_term' => $saved_term);
      // ... und speichern die Node.
      node_save($node);
    }

  }
}
